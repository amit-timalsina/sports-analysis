"""Add conversation tables

Revision ID: 70a4bc3c6930
Revises: abe7610f7ee7
Create Date: 2025-07-19 08:54:05.769937

"""

from typing import Sequence, Union

import sqlalchemy as sa

import common
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "70a4bc3c6930"
down_revision: Union[str, Sequence[str], None] = "abe7610f7ee7"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "conversation_analytics",
        sa.Column("date", sa.DateTime(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("total_conversations", sa.Integer(), nullable=False),
        sa.Column("completed_conversations", sa.Integer(), nullable=False),
        sa.Column("abandoned_conversations", sa.Integer(), nullable=False),
        sa.Column("error_conversations", sa.Integer(), nullable=False),
        sa.Column("average_turns_per_conversation", sa.Float(), nullable=True),
        sa.Column("average_messages_per_conversation", sa.Float(), nullable=True),
        sa.Column("average_conversation_duration", sa.Float(), nullable=True),
        sa.Column("median_conversation_duration", sa.Float(), nullable=True),
        sa.Column("average_data_quality", sa.Float(), nullable=True),
        sa.Column("average_efficiency", sa.Float(), nullable=True),
        sa.Column("average_user_satisfaction", sa.Float(), nullable=True),
        sa.Column("activity_breakdown", sa.JSON(), nullable=False),
        sa.Column("completion_rate_by_activity", sa.JSON(), nullable=False),
        sa.Column("most_asked_questions", sa.JSON(), nullable=False),
        sa.Column("most_problematic_fields", sa.JSON(), nullable=False),
        sa.Column("question_success_rates", sa.JSON(), nullable=False),
        sa.Column("average_time_per_stage", sa.JSON(), nullable=False),
        sa.Column("stage_completion_rates", sa.JSON(), nullable=False),
        sa.Column("average_ai_response_time", sa.Float(), nullable=True),
        sa.Column("ai_model_usage", sa.JSON(), nullable=False),
        sa.Column("total_ai_tokens_used", sa.Integer(), nullable=True),
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the record (Primary Key).",
        ),
        sa.Column(
            "created_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record creation timestamp.",
        ),
        sa.Column(
            "updated_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record last update timestamp.",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_conversation_analytics_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_conversation_analytics_date"), "conversation_analytics", ["date"], unique=False
    )
    op.create_index(
        op.f("ix_conversation_analytics_id"), "conversation_analytics", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_conversation_analytics_user_id"),
        "conversation_analytics",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "conversations",
        sa.Column("session_id", sa.String(), nullable=False),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column(
            "activity_type",
            sa.Enum(
                "FITNESS", "CRICKET_COACHING", "CRICKET_MATCH", "REST_DAY", name="activitytype"
            ),
            nullable=False,
        ),
        sa.Column(
            "state",
            sa.Enum(
                "STARTED",
                "COLLECTING_DATA",
                "ASKING_FOLLOWUP",
                "VALIDATING_DATA",
                "CONFIRMED",
                "COMPLETED",
                "CANCELLED",
                "ERROR",
                name="conversationstate",
            ),
            nullable=False,
        ),
        sa.Column(
            "stage",
            sa.Enum(
                "INITIAL_INPUT",
                "BASIC_DATA_COLLECTION",
                "DETAILED_DATA_COLLECTION",
                "CLARIFICATION",
                "VALIDATION",
                "FINALIZATION",
                name="conversationstage",
            ),
            nullable=False,
        ),
        sa.Column("current_data", sa.JSON(), nullable=False),
        sa.Column("data_confidence", sa.JSON(), nullable=False),
        sa.Column("missing_fields", sa.JSON(), nullable=False),
        sa.Column("validation_errors", sa.JSON(), nullable=False),
        sa.Column("pending_questions", sa.JSON(), nullable=False),
        sa.Column("question_attempts", sa.JSON(), nullable=False),
        sa.Column("max_turns_allowed", sa.Integer(), nullable=False),
        sa.Column("total_turns", sa.Integer(), nullable=False),
        sa.Column("total_messages", sa.Integer(), nullable=False),
        sa.Column("completion_status", sa.String(), nullable=False),
        sa.Column("overall_data_quality_score", sa.Float(), nullable=True),
        sa.Column("conversation_efficiency", sa.Float(), nullable=True),
        sa.Column("user_satisfaction_score", sa.Float(), nullable=True),
        sa.Column("final_data", sa.JSON(), nullable=False),
        sa.Column(
            "started_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "last_activity_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("total_duration_seconds", sa.Float(), nullable=True),
        sa.Column("activity_entry_id", sa.UUID(), nullable=True),
        sa.Column("activity_entry_type", sa.String(), nullable=True),
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the record (Primary Key).",
        ),
        sa.Column(
            "created_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record creation timestamp.",
        ),
        sa.Column(
            "updated_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record last update timestamp.",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_conversations_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_conversations_activity_type"), "conversations", ["activity_type"], unique=False
    )
    op.create_index(op.f("ix_conversations_id"), "conversations", ["id"], unique=True)
    op.create_index(
        op.f("ix_conversations_session_id"), "conversations", ["session_id"], unique=True
    )
    op.create_index(op.f("ix_conversations_user_id"), "conversations", ["user_id"], unique=False)
    op.create_table(
        "conversation_turns",
        sa.Column("conversation_id", sa.UUID(), nullable=False),
        sa.Column("turn_number", sa.Integer(), nullable=False),
        sa.Column("data_extracted_this_turn", sa.JSON(), nullable=False),
        sa.Column("questions_resolved", sa.JSON(), nullable=False),
        sa.Column("new_questions_raised", sa.JSON(), nullable=False),
        sa.Column("turn_effectiveness_score", sa.Float(), nullable=True),
        sa.Column("data_completeness_after_turn", sa.Float(), nullable=True),
        sa.Column("turn_strategy", sa.String(), nullable=True),
        sa.Column(
            "turn_started_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("turn_completed_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("turn_duration_seconds", sa.Float(), nullable=True),
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the record (Primary Key).",
        ),
        sa.Column(
            "created_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record creation timestamp.",
        ),
        sa.Column(
            "updated_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record last update timestamp.",
        ),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["conversations.id"],
            name=op.f("fk_conversation_turns_conversation_id_conversations"),
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_conversation_turns_conversation_id"),
        "conversation_turns",
        ["conversation_id"],
        unique=False,
    )
    op.create_index(op.f("ix_conversation_turns_id"), "conversation_turns", ["id"], unique=True)
    op.create_table(
        "question_contexts",
        sa.Column("conversation_id", sa.UUID(), nullable=False),
        sa.Column("target_field", sa.String(), nullable=False),
        sa.Column("question_text", sa.String(), nullable=False),
        sa.Column(
            "question_type",
            sa.Enum(
                "REQUIRED",
                "OPTIONAL",
                "CLARIFICATION",
                "VALIDATION",
                "FOLLOW_UP",
                name="questiontype",
            ),
            nullable=False,
        ),
        sa.Column("asked_at_turn", sa.Integer(), nullable=False),
        sa.Column("attempts_count", sa.Integer(), nullable=False),
        sa.Column("max_attempts", sa.Integer(), nullable=False),
        sa.Column(
            "resolution_status",
            sa.Enum("PENDING", "ANSWERED", "SKIPPED", "INFERRED", name="resolutionstatus"),
            nullable=False,
        ),
        sa.Column("question_strategy", sa.String(), nullable=False),
        sa.Column("context_data", sa.JSON(), nullable=False),
        sa.Column("resolved_at_turn", sa.Integer(), nullable=True),
        sa.Column("resolved_with_confidence", sa.Float(), nullable=True),
        sa.Column("final_answer", sa.String(), nullable=True),
        sa.Column(
            "first_asked_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("resolved_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the record (Primary Key).",
        ),
        sa.Column(
            "created_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record creation timestamp.",
        ),
        sa.Column(
            "updated_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record last update timestamp.",
        ),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["conversations.id"],
            name=op.f("fk_question_contexts_conversation_id_conversations"),
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_question_contexts_conversation_id"),
        "question_contexts",
        ["conversation_id"],
        unique=False,
    )
    op.create_index(op.f("ix_question_contexts_id"), "question_contexts", ["id"], unique=True)
    op.create_index(
        op.f("ix_question_contexts_target_field"),
        "question_contexts",
        ["target_field"],
        unique=False,
    )
    op.create_table(
        "conversation_messages",
        sa.Column("conversation_id", sa.UUID(), nullable=False),
        sa.Column("turn_id", sa.UUID(), nullable=True),
        sa.Column(
            "message_type",
            sa.Enum(
                "USER_INPUT",
                "AI_RESPONSE",
                "FOLLOW_UP_QUESTION",
                "CLARIFICATION_REQUEST",
                "VALIDATION_CHECK",
                "SYSTEM_MESSAGE",
                name="messagetype",
            ),
            nullable=False,
        ),
        sa.Column("sequence_number", sa.Integer(), nullable=False),
        sa.Column("parent_message_id", sa.UUID(), nullable=True),
        sa.Column("content", sa.String(), nullable=False),
        sa.Column("raw_transcript", sa.String(), nullable=True),
        sa.Column("transcript_confidence", sa.Float(), nullable=True),
        sa.Column("processing_duration", sa.Float(), nullable=True),
        sa.Column("ai_model_used", sa.String(), nullable=True),
        sa.Column("ai_temperature", sa.Float(), nullable=True),
        sa.Column("ai_tokens_used", sa.Integer(), nullable=True),
        sa.Column("extracted_data", sa.JSON(), nullable=False),
        sa.Column("extraction_confidence", sa.Float(), nullable=True),
        sa.Column(
            "message_timestamp",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the record (Primary Key).",
        ),
        sa.Column(
            "created_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record creation timestamp.",
        ),
        sa.Column(
            "updated_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record last update timestamp.",
        ),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["conversations.id"],
            name=op.f("fk_conversation_messages_conversation_id_conversations"),
        ),
        sa.ForeignKeyConstraint(
            ["parent_message_id"],
            ["conversation_messages.id"],
            name=op.f("fk_conversation_messages_parent_message_id_conversation_messages"),
        ),
        sa.ForeignKeyConstraint(
            ["turn_id"],
            ["conversation_turns.id"],
            name=op.f("fk_conversation_messages_turn_id_conversation_turns"),
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_conversation_messages_conversation_id"),
        "conversation_messages",
        ["conversation_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_conversation_messages_id"), "conversation_messages", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_conversation_messages_turn_id"), "conversation_messages", ["turn_id"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_conversation_messages_turn_id"), table_name="conversation_messages")
    op.drop_index(op.f("ix_conversation_messages_id"), table_name="conversation_messages")
    op.drop_index(
        op.f("ix_conversation_messages_conversation_id"), table_name="conversation_messages"
    )
    op.drop_table("conversation_messages")
    op.drop_index(op.f("ix_question_contexts_target_field"), table_name="question_contexts")
    op.drop_index(op.f("ix_question_contexts_id"), table_name="question_contexts")
    op.drop_index(op.f("ix_question_contexts_conversation_id"), table_name="question_contexts")
    op.drop_table("question_contexts")
    op.drop_index(op.f("ix_conversation_turns_id"), table_name="conversation_turns")
    op.drop_index(op.f("ix_conversation_turns_conversation_id"), table_name="conversation_turns")
    op.drop_table("conversation_turns")
    op.drop_index(op.f("ix_conversations_user_id"), table_name="conversations")
    op.drop_index(op.f("ix_conversations_session_id"), table_name="conversations")
    op.drop_index(op.f("ix_conversations_id"), table_name="conversations")
    op.drop_index(op.f("ix_conversations_activity_type"), table_name="conversations")
    op.drop_table("conversations")
    op.drop_index(op.f("ix_conversation_analytics_user_id"), table_name="conversation_analytics")
    op.drop_index(op.f("ix_conversation_analytics_id"), table_name="conversation_analytics")
    op.drop_index(op.f("ix_conversation_analytics_date"), table_name="conversation_analytics")
    op.drop_table("conversation_analytics")
    # ### end Alembic commands ###
