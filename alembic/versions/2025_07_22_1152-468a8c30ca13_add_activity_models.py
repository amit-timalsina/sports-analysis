"""Add activity models

Revision ID: 468a8c30ca13
Revises: 1fb70518198c
Create Date: 2025-07-22 11:52:16.343339

"""

from collections.abc import Sequence

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

import common
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "468a8c30ca13"
down_revision: str | Sequence[str] | None = "1fb70518198c"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    activity_type_enum = postgresql.ENUM(name="activitytype", create_type=False)
    op.create_table(
        "cricket_coaching_entries",
        sa.Column(
            "activity_type",
            activity_type_enum,
            nullable=False,
        ),
        sa.Column("coach_name", sa.String(), nullable=False),
        sa.Column("session_type", sa.String(), nullable=False),
        sa.Column("duration_minutes", sa.Integer(), nullable=False),
        sa.Column(
            "primary_focus",
            postgresql.ENUM(
                "TECHNIQUE",
                "FITNESS",
                "TACTICS",
                "MENTAL",
                "SPECIFIC_SKILLS",
                "GAME_SITUATION",
                name="coachingfocus",
            ),
            nullable=True,
        ),
        sa.Column(
            "secondary_focus",
            postgresql.ENUM(name="coachingfocus", create_type=False),
            nullable=True,
        ),
        sa.Column("skills_practiced", sa.JSON(), nullable=False),
        sa.Column(
            "discipline_focus",
            sa.Enum(
                "BATTING",
                "BOWLING",
                "FIELDING",
                "WICKET_KEEPING",
                "ALL_ROUND",
                name="cricketdiscipline",
            ),
            nullable=True,
        ),
        sa.Column("warm_up_minutes", sa.Integer(), nullable=True),
        sa.Column("skill_work_minutes", sa.Integer(), nullable=True),
        sa.Column("game_simulation_minutes", sa.Integer(), nullable=True),
        sa.Column("cool_down_minutes", sa.Integer(), nullable=True),
        sa.Column("equipment_used", sa.JSON(), nullable=True),
        sa.Column("facility_name", sa.String(), nullable=True),
        sa.Column("indoor_outdoor", sa.String(), nullable=True),
        sa.Column("technique_rating", sa.Integer(), nullable=True),
        sa.Column("effort_level", sa.Integer(), nullable=True),
        sa.Column("coach_feedback", sa.String(), nullable=True),
        sa.Column("improvement_areas", sa.JSON(), nullable=True),
        sa.Column("session_goals", sa.JSON(), nullable=True),
        sa.Column("goals_achieved", sa.JSON(), nullable=True),
        sa.Column("next_session_focus", sa.String(), nullable=True),
        sa.Column("session_cost", sa.Float(), nullable=True),
        sa.Column("group_size", sa.Integer(), nullable=True),
        sa.Column("start_time", sa.Time(), nullable=True),
        sa.Column("end_time", sa.Time(), nullable=True),
        sa.Column("conversation_id", sa.UUID(), nullable=False),
        sa.Column("mental_state", sa.String(), nullable=False),
        sa.Column("energy_level", sa.Integer(), nullable=True),
        sa.Column("notes", sa.String(), nullable=True),
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the record (Primary Key).",
        ),
        sa.Column(
            "created_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record creation timestamp.",
        ),
        sa.Column(
            "updated_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record last update timestamp.",
        ),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["conversations.id"],
            name=op.f("fk_cricket_coaching_entries_conversation_id_conversations"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_cricket_coaching_entries_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_cricket_coaching_entries_activity_type"),
        "cricket_coaching_entries",
        ["activity_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_cricket_coaching_entries_conversation_id"),
        "cricket_coaching_entries",
        ["conversation_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_cricket_coaching_entries_id"),
        "cricket_coaching_entries",
        ["id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_cricket_coaching_entries_user_id"),
        "cricket_coaching_entries",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "cricket_match_entries",
        sa.Column(
            "activity_type",
            activity_type_enum,
            nullable=False,
        ),
        sa.Column(
            "match_format",
            sa.Enum(
                "T20",
                "ODI",
                "TEST",
                "LIST_A",
                "FIRST_CLASS",
                "FRIENDLY",
                "PRACTICE_MATCH",
                name="matchformat",
            ),
            nullable=True,
        ),
        sa.Column("opposition_team", sa.String(), nullable=False),
        sa.Column("venue", sa.String(), nullable=False),
        sa.Column("home_away", sa.String(), nullable=False),
        sa.Column("result", sa.String(), nullable=False),
        sa.Column("team_name", sa.String(), nullable=False),
        sa.Column("team_total", sa.Integer(), nullable=True),
        sa.Column("team_wickets", sa.Integer(), nullable=True),
        sa.Column("team_overs", sa.Float(), nullable=True),
        sa.Column("opposition_total", sa.Integer(), nullable=True),
        sa.Column("opposition_wickets", sa.Integer(), nullable=True),
        sa.Column("opposition_overs", sa.Float(), nullable=True),
        sa.Column("batting_position", sa.Integer(), nullable=True),
        sa.Column("runs_scored", sa.Integer(), nullable=True),
        sa.Column("balls_faced", sa.Integer(), nullable=True),
        sa.Column("boundaries", sa.Integer(), nullable=True),
        sa.Column("sixes", sa.Integer(), nullable=True),
        sa.Column("dismissal_type", sa.String(), nullable=True),
        sa.Column("strike_rate", sa.Float(), nullable=True),
        sa.Column("overs_bowled", sa.Float(), nullable=True),
        sa.Column("runs_conceded", sa.Integer(), nullable=True),
        sa.Column("wickets_taken", sa.Integer(), nullable=True),
        sa.Column("economy_rate", sa.Float(), nullable=True),
        sa.Column("best_bowling", sa.String(), nullable=True),
        sa.Column("catches_taken", sa.Integer(), nullable=True),
        sa.Column("run_outs", sa.Integer(), nullable=True),
        sa.Column("stumpings", sa.Integer(), nullable=True),
        sa.Column("fielding_position", sa.String(), nullable=True),
        sa.Column("weather_conditions", sa.String(), nullable=True),
        sa.Column("pitch_conditions", sa.String(), nullable=True),
        sa.Column("toss_won_by", sa.String(), nullable=True),
        sa.Column("elected_to", sa.String(), nullable=True),
        sa.Column("batting_performance", sa.Integer(), nullable=True),
        sa.Column("bowling_performance", sa.Integer(), nullable=True),
        sa.Column("fielding_performance", sa.Integer(), nullable=True),
        sa.Column("overall_performance", sa.Integer(), nullable=True),
        sa.Column("key_moments", sa.JSON(), nullable=True),
        sa.Column("what_went_well", sa.JSON(), nullable=True),
        sa.Column("areas_for_improvement", sa.JSON(), nullable=True),
        sa.Column("captain_feedback", sa.String(), nullable=True),
        sa.Column("coach_feedback", sa.String(), nullable=True),
        sa.Column("match_duration_hours", sa.Float(), nullable=True),
        sa.Column("start_time", sa.Time(), nullable=True),
        sa.Column("end_time", sa.Time(), nullable=True),
        sa.Column("match_fee", sa.Float(), nullable=True),
        sa.Column("travel_distance_km", sa.Float(), nullable=True),
        sa.Column("conversation_id", sa.UUID(), nullable=False),
        sa.Column("mental_state", sa.String(), nullable=False),
        sa.Column("energy_level", sa.Integer(), nullable=True),
        sa.Column("notes", sa.String(), nullable=True),
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the record (Primary Key).",
        ),
        sa.Column(
            "created_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record creation timestamp.",
        ),
        sa.Column(
            "updated_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record last update timestamp.",
        ),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["conversations.id"],
            name=op.f("fk_cricket_match_entries_conversation_id_conversations"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_cricket_match_entries_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_cricket_match_entries_activity_type"),
        "cricket_match_entries",
        ["activity_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_cricket_match_entries_conversation_id"),
        "cricket_match_entries",
        ["conversation_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_cricket_match_entries_id"),
        "cricket_match_entries",
        ["id"],
        unique=True,
    )
    op.create_index(
        op.f("ix_cricket_match_entries_user_id"),
        "cricket_match_entries",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "fitness_entries",
        sa.Column(
            "activity_type",
            activity_type_enum,
            nullable=False,
        ),
        sa.Column(
            "exercise_type",
            sa.Enum("CARDIO", "STRENGTH", "FLEXIBILITY", "SPORTS", "OTHER", name="exercisetype"),
            nullable=False,
        ),
        sa.Column("exercise_name", sa.String(), nullable=False),
        sa.Column("duration_minutes", sa.Integer(), nullable=False),
        sa.Column(
            "intensity",
            sa.Enum("LOW", "MODERATE", "HIGH", "VERY_HIGH", name="intensitylevel"),
            nullable=False,
        ),
        sa.Column("calories_burned", sa.Integer(), nullable=True),
        sa.Column("distance_km", sa.Float(), nullable=True),
        sa.Column("sets", sa.Integer(), nullable=True),
        sa.Column("reps", sa.Integer(), nullable=True),
        sa.Column("weight_kg", sa.Float(), nullable=True),
        sa.Column("heart_rate_avg", sa.Integer(), nullable=True),
        sa.Column("heart_rate_max", sa.Integer(), nullable=True),
        sa.Column("workout_rating", sa.Integer(), nullable=True),
        sa.Column("equipment_used", sa.JSON(), nullable=True),
        sa.Column("location", sa.String(), nullable=True),
        sa.Column("gym_name", sa.String(), nullable=True),
        sa.Column("weather_conditions", sa.String(), nullable=True),
        sa.Column("temperature", sa.Float(), nullable=True),
        sa.Column("workout_partner", sa.String(), nullable=True),
        sa.Column("trainer_name", sa.String(), nullable=True),
        sa.Column("start_time", sa.Time(), nullable=True),
        sa.Column("end_time", sa.Time(), nullable=True),
        sa.Column("conversation_id", sa.UUID(), nullable=False),
        sa.Column("mental_state", sa.String(), nullable=False),
        sa.Column("energy_level", sa.Integer(), nullable=True),
        sa.Column("notes", sa.String(), nullable=True),
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the record (Primary Key).",
        ),
        sa.Column(
            "created_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record creation timestamp.",
        ),
        sa.Column(
            "updated_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record last update timestamp.",
        ),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["conversations.id"],
            name=op.f("fk_fitness_entries_conversation_id_conversations"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_fitness_entries_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_fitness_entries_activity_type"),
        "fitness_entries",
        ["activity_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_fitness_entries_conversation_id"),
        "fitness_entries",
        ["conversation_id"],
        unique=False,
    )
    op.create_index(op.f("ix_fitness_entries_id"), "fitness_entries", ["id"], unique=True)
    op.create_index(
        op.f("ix_fitness_entries_user_id"),
        "fitness_entries",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "rest_day_entries",
        sa.Column(
            "activity_type",
            activity_type_enum,
            nullable=False,
        ),
        sa.Column("rest_type", sa.String(), nullable=False),
        sa.Column("planned", sa.Boolean(), nullable=False),
        sa.Column("recovery_activities", sa.JSON(), nullable=True),
        sa.Column("sleep_hours", sa.Float(), nullable=True),
        sa.Column("sleep_quality", sa.Integer(), nullable=True),
        sa.Column("muscle_soreness", sa.Integer(), nullable=True),
        sa.Column("fatigue_level", sa.Integer(), nullable=True),
        sa.Column("stress_level", sa.Integer(), nullable=True),
        sa.Column("recovery_score", sa.Integer(), nullable=True),
        sa.Column("readiness_for_next_workout", sa.Integer(), nullable=True),
        sa.Column("meditation_minutes", sa.Integer(), nullable=True),
        sa.Column("stretching_minutes", sa.Integer(), nullable=True),
        sa.Column("massage_minutes", sa.Integer(), nullable=True),
        sa.Column("hydration_liters", sa.Float(), nullable=True),
        sa.Column("protein_focus", sa.Boolean(), nullable=True),
        sa.Column("nutrition_notes", sa.String(), nullable=True),
        sa.Column("conversation_id", sa.UUID(), nullable=False),
        sa.Column("mental_state", sa.String(), nullable=False),
        sa.Column("energy_level", sa.Integer(), nullable=True),
        sa.Column("notes", sa.String(), nullable=True),
        sa.Column(
            "id",
            sa.UUID(),
            nullable=False,
            comment="Unique identifier for the record (Primary Key).",
        ),
        sa.Column(
            "created_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record creation timestamp.",
        ),
        sa.Column(
            "updated_at",
            common.mixins.timestamp_mixin.UTCDateTime(timezone=True),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
            comment="Record last update timestamp.",
        ),
        sa.Column("user_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["conversations.id"],
            name=op.f("fk_rest_day_entries_conversation_id_conversations"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("fk_rest_day_entries_user_id_users"),
            ondelete="SET NULL",
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_rest_day_entries_activity_type"),
        "rest_day_entries",
        ["activity_type"],
        unique=False,
    )
    op.create_index(
        op.f("ix_rest_day_entries_conversation_id"),
        "rest_day_entries",
        ["conversation_id"],
        unique=False,
    )
    op.create_index(op.f("ix_rest_day_entries_id"), "rest_day_entries", ["id"], unique=True)
    op.create_index(
        op.f("ix_rest_day_entries_user_id"),
        "rest_day_entries",
        ["user_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_rest_day_entries_user_id"), table_name="rest_day_entries")
    op.drop_index(op.f("ix_rest_day_entries_id"), table_name="rest_day_entries")
    op.drop_index(op.f("ix_rest_day_entries_conversation_id"), table_name="rest_day_entries")
    op.drop_index(op.f("ix_rest_day_entries_activity_type"), table_name="rest_day_entries")
    op.drop_table("rest_day_entries")
    op.drop_index(op.f("ix_fitness_entries_user_id"), table_name="fitness_entries")
    op.drop_index(op.f("ix_fitness_entries_id"), table_name="fitness_entries")
    op.drop_index(op.f("ix_fitness_entries_conversation_id"), table_name="fitness_entries")
    op.drop_index(op.f("ix_fitness_entries_activity_type"), table_name="fitness_entries")
    op.drop_table("fitness_entries")
    op.drop_index(op.f("ix_cricket_match_entries_user_id"), table_name="cricket_match_entries")
    op.drop_index(op.f("ix_cricket_match_entries_id"), table_name="cricket_match_entries")
    op.drop_index(
        op.f("ix_cricket_match_entries_conversation_id"),
        table_name="cricket_match_entries",
    )
    op.drop_index(
        op.f("ix_cricket_match_entries_activity_type"),
        table_name="cricket_match_entries",
    )
    op.drop_table("cricket_match_entries")
    op.drop_index(
        op.f("ix_cricket_coaching_entries_user_id"),
        table_name="cricket_coaching_entries",
    )
    op.drop_index(op.f("ix_cricket_coaching_entries_id"), table_name="cricket_coaching_entries")
    op.drop_index(
        op.f("ix_cricket_coaching_entries_conversation_id"),
        table_name="cricket_coaching_entries",
    )
    op.drop_index(
        op.f("ix_cricket_coaching_entries_activity_type"),
        table_name="cricket_coaching_entries",
    )
    op.drop_table("cricket_coaching_entries")
    op.execute("DROP TYPE IF EXISTS matchformat CASCADE")
    op.execute("DROP TYPE IF EXISTS coachingfocus CASCADE")
    op.execute("DROP TYPE IF EXISTS cricketdiscipline CASCADE")
    op.execute("DROP TYPE IF EXISTS exercisetype CASCADE")
    op.execute("DROP TYPE IF EXISTS intensitylevel CASCADE")
    # ### end Alembic commands ###
